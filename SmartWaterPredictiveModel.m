%%Pre Process Data
ds=datastore("LakeDATA\*Quality*.csv","TextType","string","DatetimeType","text");
Week1=read(ds);


Week1.Date= datetime(Week1.Date,'InputFormat','yyyy-MM-dd');
Week1.Date.Format='dd/MM/uuuu';

Week1 = rmmissing(Week1,"DataVariables",width(Week1));

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 3);

% Specify sheet and range
opts.Sheet = "Sheet1";
opts.DataRange = "A2:C6";

% Specify column names and types
opts.VariableNames = ["Parameters", "StandardValue", "IdealValue"];
opts.VariableTypes = ["string", "double", "double"];

% Specify variable properties
opts = setvaropts(opts, "Parameters", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "Parameters", "EmptyFieldRule", "auto");

% Import the data
QualityIndex = readtable("C:\Users\celeste\Desktop\fer\Proyecto Fase I\Matlab\QualityIndex.xlsx", opts, "UseExcel", false)


%% Clear temporary variables
clear opts

%% Analyze Data
Weekdata=Week1{:,3:7};
meanWeek= mean(Weekdata,'omitnan');
medianWeek= median(Weekdata,'omitnan');
modeWeek=mode(Weekdata);
varianceWeek=var(Weekdata,'omitnan');
stdWeek = std(Weekdata, 'omitnan');
maxWeek= max(Weekdata);
minWeek= min(Weekdata);
rangeWeek= range(Weekdata);
departureWeek= Weekdata-meanWeek;
normalizedWeek = (Weekdata - meanWeek) ./ stdWeek;

analysisTable = table(meanWeek', medianWeek', modeWeek', varianceWeek', stdWeek', maxWeek', minWeek', rangeWeek');
analysisTable.Properties.VariableNames = {'Mean', 'Median', 'Mode', 'Variance', 'Standard Deviation', 'Max', 'Min', 'Range'};
analysisTable.Properties.RowNames = {'Temperature', 'pH', 'TDS', 'Turbulence', 'ORP'}

WeekdataTable = array2table(Weekdata, 'VariableNames', {'Temperature', 'pH', 'TDS', 'Turbidity', 'ORP'});

k=sum(1./QualityIndex.StandardValue);
k=1/k;
Wi=(k ./QualityIndex.StandardValue);
Qs=(QualityIndex.StandardValue-QualityIndex.IdealValue);

for i = 1:size(WeekdataTable, 2)
    parameter = QualityIndex.Parameters{i};
    standard_value = QualityIndex.StandardValue(i);
    ideal_value = QualityIndex.IdealValue(i);
    idx = strcmp(QualityIndex.Parameters, parameter);
    StandardTable(:, i) = abs(standard_value-WeekdataTable(:, i));
    IdealTable(:,i)=abs(WeekdataTable(:,i)-ideal_value);
end
Qt = IdealTable{:,:};
StandardMatrix = table2array(StandardTable);
Qi = 100*(Qt ./ StandardMatrix);
QiWi=Qi.*Wi';
WQI=sum(QiWi,2);

Week1 = addvars(Week1, WQI, 'After', 'ORP', 'NewVariableNames', 'WQI')

yfit = Ensemblemdl.predictFcn(Week1) 
function [trainedModel, validationRMSE] = trainRegressionModel(trainingData)
% [trainedModel, validationRMSE] = trainRegressionModel(trainingData)
% Returns a trained regression model and its RMSE. This code recreates the
% model trained in Regression Learner app. Use the generated code to
% automate training the same model with new data, or to learn how to
% programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%
%  Output:
%      trainedModel: A struct containing the trained regression model. The
%       struct contains various fields with information about the trained
%       model.
%
%      trainedModel.predictFcn: A function to make predictions on new data.
%
%      validationRMSE: A double representing the validation RMSE. In the
%       app, the Models pane displays the validation RMSE for each model.
%
% Use the code to train the model with new data. To retrain your model,
% call the function from the command line with your original data or new
% data as the input argument trainingData.
%
% For example, to retrain a regression model trained with the original data
% set T, enter:
%   [trainedModel, validationRMSE] = trainRegressionModel(T)
%
% To make predictions with the returned 'trainedModel' on new data T2, use
%   yfit = trainedModel.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedModel.HowToPredict

% Auto-generated by MATLAB on 13-Apr-2024 02:26:21


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Temperature', 'pH', 'TDS', 'ORP', 'WQI'};
predictors = inputTable(:, predictorNames);
response = inputTable.Turbulency;
isCategoricalPredictor = [false, false, false, false, false];

% Train a regression model
% This code specifies all the model options and trains the model.
template = templateTree(...
    'MinLeafSize', 8, ...
    'NumVariablesToSample', 'all');
regressionEnsemble = fitrensemble(...
    predictors, ...
    response, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(regressionEnsemble, x);
trainedModel.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedModel.RequiredVariables = {'Temperature', 'pH', 'TDS', 'ORP', 'WQI'};
trainedModel.RegressionEnsemble = regressionEnsemble;
trainedModel.About = 'This struct is a trained model exported from Regression Learner R2023b.';
trainedModel.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appregression_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Temperature', 'pH', 'TDS', 'ORP', 'WQI'};
predictors = inputTable(:, predictorNames);
response = inputTable.Turbulency;
isCategoricalPredictor = [false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedModel.RegressionEnsemble, 'KFold', 5);

% Compute validation predictions
validationPredictions = kfoldPredict(partitionedModel);

% Compute validation RMSE
validationRMSE = sqrt(kfoldLoss(partitionedModel, 'LossFun', 'mse'));
end

